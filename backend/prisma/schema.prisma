// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Users {
  id        Int @id @default(autoincrement())
  login     String @unique
  email     String @unique
  password  String
  phone     String?
  highlights Highlights[]
  collections Collections[]
  words     Words[]
  tests     Tests[]
  achievements AchievementsOnUsers[]
  language  String
  theme     String
  books     Books[] @relation("bookOwner")
}

model Books {
  id        Int @id @default(autoincrement())
  title     String
  author    String?
  document  String
  image     String?
  highlights Highlights[]
  collections BooksOnCollections[]
  uploaded  String
  user      Users @relation("bookOwner", fields: [userid], references: [id]) 
  userid    Int
  tests     Tests[]
}

model Achievements {
  id               Int @id @default(autoincrement())
  name             String @unique
  description      String
  users            AchievementsOnUsers[]
}

model Rects {
  id      Int @id @default(autoincrement())
  x1      Int?
  y1      Int?
  x2      Int?
  y2      Int?
  width   Int?
  height  Int?
  pagenum Int?
  highlightbr Highlights[] @relation("rectsOnHighlightsBR")
  highlightrects RectsOnHighlights[]

  @@unique([x1, y1, x2, y2, width, height, pagenum])
}

model Collections {
  id              Int @id @default(autoincrement())
  title           String
  user            Users @relation(fields: [userid], references: [id]) 
  userid          Int
  books           BooksOnCollections[]
  tests           TestsOnCollections[]
}

model Highlights {
  id             Int @id @default(autoincrement())
  book           Books @relation(fields: [bookid], references: [id])
  bookid         Int
  user           Users @relation(fields: [userid], references: [id])
  userid         Int
  boundingRect   Rects @relation("rectsOnHighlightsBR", fields: [brid], references: [id], onDelete: Cascade)
  brid          Int
  rects          RectsOnHighlights[]
  title          String
  text           String
  color          String
  image          String?
  width          Int?
  height         Int?
  emoji          String?
}

model Words {
  id Int    @id @default(autoincrement())
  color     String
  word      String
  description String
  translation String
  user      Users @relation(fields: [userid], references: [id])
  userid    Int
  test      Tests @relation(fields: [testid], references: [id])
  testid    Int
}

model Tests {
  id        Int @id @default(autoincrement())
  title     String
  prompt    String
  language  String
  difficulty String
  questionCount Int
  lastResult Int?
  user      Users @relation(fields: [userid], references: [id])
  userid    Int
  questions Questions[]
  collections TestsOnCollections[]
  words     Words[]
  result    Int
  book      Books @relation(fields: [bookid], references: [id])
  bookid    Int
}

model Questions {
  id            Int @id @default(autoincrement())
  test          Tests @relation(fields: [testid], references: [id], onDelete: Cascade)
  testid        Int
  number        Int
  questionText  String
  type          String
  answers       String?
  correct       String
  explanation   String?
}

model AchievementsOnUsers {
  user                    Users @relation(fields: [userid], references: [id])
  userid                  Int
  achievement             Achievements @relation(fields: [achievementid], references: [id])
  achievementid           Int

  @@id([userid, achievementid])
}

model BooksOnCollections {
  books                  Books @relation(fields: [bookid], references: [id])
  bookid                 Int
  collections            Collections @relation(fields: [collectionid], references: [id])
  collectionid           Int
  position               Int
  @@id([bookid, collectionid])
}

model TestsOnCollections {
  tests                  Tests @relation(fields: [testid], references: [id])
  testid                 Int
  collections            Collections @relation(fields: [collectionid], references: [id])
  collectionid           Int
  position               Int
  @@id([testid, collectionid])
}

model RectsOnHighlights {
  rects                 Rects @relation(fields: [rectid], references: [id], onDelete: NoAction)
  rectid                Int
  highlights            Highlights @relation(fields: [highlightid], references: [id], onDelete: Cascade)
  highlightid           Int

  @@id([rectid, highlightid])
}